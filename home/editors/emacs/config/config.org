#+TITLE: nicekoishi's Emacs Config
#+AUTHOR: nicekoishi
#+DESCRIPTION: personal emacs config, following DT's tutorial
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle config.el

* Table of Contents :toc:
- [[#load-these-first][Load these first]]
  - [[#straight-package-manager][Straight Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#code-completion][Code Completion]]
  - [[#corfu][Corfu]]
  - [[#quality-of-life][Quality of Life]]
- [[#custom-functions][Custom functions]]
  - [[#reload-emacs][Reload Emacs]]
- [[#fonts][Fonts]]
  - [[#setting-up-font-face][Setting up font face]]
- [[#graphical-user-interface-tweaks][Graphical User Interface Tweaks]]
  - [[#disabling-annoying-stuff][Disabling annoying stuff]]
  - [[#line-numbers-and-truncated-lines][Line Numbers and Truncated Lines]]
  - [[#setting-alpha-background][Setting Alpha Background]]
  - [[#theming][Theming]]
- [[#language-server-protocol-lsp][Language Server Protocol (LSP)]]
- [[#modes][Modes]]
  - [[#nix][Nix]]
  - [[#org][Org]]
- [[#projectile][Projectile]]
- [[#treesiter][Treesiter]]
- [[#vertico][Vertico]]
- [[#which-key][Which Key]]

* Load these first
** Straight Package Manager
Why I don't use nix to handle packages? I'm lazy I guess
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-use-package-by-default 't)
#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode)
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
    (use-package evil-tutor))
#+end_src
** General Keybindings
Here we set some things up, like the global modifier key.
If you want to add an extension to the leader-keys, do not forget the ) at the end!
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    (general-create-definer no/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; leader key
      :global-prefix "M-SPC" ;; leader in insert mode
      )
#+end_src

*** Buffer Keybindings
Keybindings to do basic buffer management
#+begin_src emacs-lisp
  (no/leader-keys
    "b"  '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "List buffers")
    "b k" '(kill-this-buffer :wk "Kill current buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))
#+end_src

*** Eval keybindings
ELisp specific keybindings, can be useful for editing this config
#+begin_src emacs-lisp
    (no/leader-keys
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region"))
#+end_src

*** File keybindings
File management keybindings
#+begin_src emacs-lisp
  (no/leader-keys
    "."  '(find-file :wk "Find file")
    "TAB TAB" '(comment-line :wk "Comment lines")
    "f p" '((lambda () (interactive) (find-file "~/Documentos/dots-flake/home/editors/emacs/config/config.org")) :wk "Edit emacs configuration")
    "f r" '(recentf-open :wk "Recent files"))
#+end_src

*** Helper keybindings
#+begin_src emacs-lisp
  (no/leader-keys
    "h" '(:ignore t :wk "pls help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h r r" '(nice/reload-init-file :wk "Reload emacs config"))
#+end_src

*** Projectile keybindings
#+begin_src emacs-lisp
  (no/leader-keys
    "p" '(:ignore t :wk "Projectile")
    "p p" '(projectile-dired :wk "Projectile Dired"))
#+end_src

*** Toggle keybindings
#+begin_src emacs-lisp
  (no/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))
  ) ;; rember if adding new leader-keys, add this parenthesis or emacs will hate u
#+end_src
* Code Completion
** Corfu
I could use company, but it lags a little. For now this is just a test
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (setq-default corfu-auto-prefix 0
                  corfu-auto-delay 0)
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.

    (use-package kind-icon
      :after corfu
      :custom
      (kind-icon-default-face 'corfu-default)
      :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

    ;; This function enables corfu in minibuffer
    (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
    :init
    (global-corfu-mode))
#+end_src

** Quality of Life
*** Aggresive Indent Mode
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :init
    (global-aggressive-indent-mode 1)
    :config
    ;; Maybe I will put rust here
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
    ;; C being funky, stop pls
    (add-to-list 'aggressive-indent-dont-indent-if
                 '(and (derived-mode-p 'c++-mode)
                       (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                           (thing-at-point 'line))))))
#+end_src

*** Better HTML completion
#+begin_src emacs-lisp
    (use-package emmet-mode
      :ensure t
      :hook
      ;; Enables emmet's CSS abbreviation
      (css-mode-hook . emmet-mode)
      ;; Auto-start emmet on any markup mode
      (sgml-mode-hook . emmet-mode))
#+end_src
* Custom functions
** Reload Emacs
this is straight from dt config ok, well almost all of this config is but ok i guess
#+begin_src emacs-lisp
  (defun nice/reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))
#+end_src

* Fonts
** Setting up font face
#+begin_src emacs-lisp
  (defvar nice/default-font-size 120
    "Default font size for fixed pitch")

  (defvar nice/default-variable-font-size 140
    "Default font size for variable pitch")

  (set-face-attribute 'default nil
                      :font "Iosevka Nerd Font"
                      :height nice/default-font-size
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "JetBrainsMonoNL Nerd Font"
                      :height nice/default-variable-font-size
                      :weight 'medium)
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; I mean, DT added it and it kinda makes difference
  ;; so I'm adding this too
  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font-12"))

  (setq-default line-spacing 0.12)
#+end_src

* Graphical User Interface Tweaks
** Disabling annoying stuff
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq create-lockfiles nil)
#+end_src

** Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Setting Alpha Background
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 78))
#+end_src

** Theming
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (setq catppuccin-flavor 'macchiato)
    (load-theme 'catppuccin t)

    ;; line numbers are almost invisible with background alpha
    (custom-set-faces '(line-number ((t (:foreground "#656a7a"))))))
#+end_src
* Language Server Protocol (LSP)
#+begin_src emacs-lisp
#+end_src

* Modes
** Nix
** Org
*** Auto Tangle
#+begin_src emacs-lisp
  (defun org-auto-tangle ()
    (when (eq major-mode 'org-mode)
      (org-babel-tangle)))

  (add-hook 'after-save-hook 'org-auto-tangle)
#+end_src

*** Disabling Electric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

*** Enabling org bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

*** Enabling table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Source Code Block Tag Expansion
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

*** Edit Special Full
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1))
#+end_src

* Treesiter
This package automatically install and uses tree-sitter major modes in Emacs 29+
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
#+end_src

* Vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-resize nil
          vertico-count 14
          vertico-cycle t)
    :config
    (setq read-file-name-completion-ignore-case t
          read-buffer-completion-ignore-case t
          completion-ignore-case t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    ;; TAB cycle if few candidates
    (setq completion-cycle-threshold 3)

    ;; Indentation+completion with TAB key
    (setq tab-always-indent 'complete))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(substring orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
* Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-lenght 25
          which-key-allow-imprecise-window-fit t
          which-key-separator "    "
          ))
#+end_src

