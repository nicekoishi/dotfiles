#!/usr/bin/env bash

##Bash script to get basic system information (i know eww have some these but im doing it anyway)

help () {
  echo "
  Usage: sys_info [--active | --nowplaying]

    -a | --active               shows title of current active window, truncates to 40 characters, hyprland specific
    -b | --nowplaying           shows playerctl info, artist - title
    -c | --nowplayingalbum      it's just uname -r, nothing fancy
    -d | --date                 fr its just date, but different ex: 14:21 May 10, 2020
    -e | --volume               wpctl get-volume with sed and awk to print 0-100 value
    -h | --help                 this is a cry for help
  "
}

get_active () {
  hyprctl activewindow -j | rg "title" | sed -e 's/"title": //g' -e 's/\(.\{27\}\).*/\1 /' | sed -e 's/"//' -e "s/..$//" | tr -d '\n'
}
get_volume () {
  wpctl get-volume @DEFAULT_SINK@ | sed 's/Volume: //g' | awk '$3=100*$1' | sed 's/^......//'
}
get_date () {
  date '+%H:%M %b %d, %Y'
}

up () {
  eval "wpctl set-volume @DEFAULT_SINK@ 5%+"
}

down () {
  eval "wpctl set-volume @DEFAULT_SINK@ 5%-"
}

##If works, it works oke
currentPlayer=$(playerctl metadata --format {{playerName}})

now_playing_info () {
  artist=$(playerctl metadata --format "{{ trunc(artist,16) }}")
  title=$(playerctl metadata --format "{{ trunc(title,21) }}")

  echo -e "$artist\n$title"
}

now_playing_time () {
  position=$(playerctl metadata --format {{position}})
  duration=$(playerctl metadata --format {{mpris:length}})

  percentage=$((position * 100 / duration))

  echo "$percentage"
}

now_playing_state () {
  status=$(playerctl status)

  if [[ $status == Playing ]]; then
    echo -e '\uf04b'
  else
    echo -e '\uf04c'
  fi
}

fetchFirefoxAlbum () {
  firefoxPath=$(find ~/.mozilla/firefox/firefox-mpris/*)
  echo $firefoxPath
}

fetchAlbum () {
  currentAlbum=$(playerctl metadata --format {{album}})
  currentAlbumUrl=$(playerctl metadata --format {{mpris:artUrl}})
  albumPath="/tmp/tmp.playerctl-is-a-dummy/$currentAlbum"
  if [[ -f $albumPath ]]; then
     echo $albumPath
  else
    mkdir -p /tmp/tmp.playerctl-is-a-dummy && find /tmp/tmp.playerctl-is-a-dummy -mindepth 1 -delete
    curl -o "$albumPath" "$currentAlbumUrl"
    echo $albumPath
  fi
}

fetchPlaceholder() {
  placeholder="/tmp/tmp.playerctl-is-a-dummy/placeholder.png"
  dokidokiwakuwaku="https://img.youtube.com/vi/RtTYQuO1j6w/mqdefault.jpg" ## Doki Doki Waku Waku Thumbnail at 320x120

  if [[ -f $placeholder ]]; then
    echo $placeholder
  else
    curl -o "$placeholder" "$dokidokiwakuwaku"
    echo "$placeholder"
  fi
}

now_playing_album () {
  if [[ $currentPlayer == firefox ]]; then
    fetchFirefoxAlbum
  elif [[ $currentPlayer == brave ]]; then
    fetchPlaceholder
  else
    fetchAlbum
  fi
}

network_status () {
  connected=false
  default=$(ip route show default)
  interface=$(echo "$default" | grep -oP 'dev \K\S+')

  while true; do
    # Ping a known server to check network connectivity
    ping -c 1 gnu.org >/dev/null 2>&1

    # Check the exit status of the ping command
    if [ $? -eq 0 ]; then
      if [ "$connected" = false ]; then
        echo -e "󰖟$interface"
        connected=true
      fi
    else
      if [ "$connected" = true ]; then
        echo "󰪎$interface"
        connected=false
      fi
    fi

    # Sleep for a specific interval before checking again
    sleep 5
  done
}

if [[ $# -eq 0 ]]; then
  help
fi

while true
do
  case "$1"
    in
    --active ) get_active; shift ;;
    --nowplaying-info) now_playing_info; shift ;;
    --nowplaying-state) now_playing_state; shift ;;
    --nowplaying-time) now_playing_time; shift ;;
    --nowplaying-album) now_playing_album; shift ;;
    --date) get_date; shift;;
    --volume) get_volume; shift ;;
    up) up; shift;;
    down) down; shift;;
    -h | --help) help; shift ;;
    *)  break ;;
  esac
done
